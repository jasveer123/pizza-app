{"id":"node_modules/connect-mongo/node_modules/mongodb/lib/mongo_types.js","dependencies":[{"name":"/home/user/Desktop/MAIN_PROJECT/node_modules/connect-mongo/node_modules/mongodb/lib/mongo_types.js.map","includedInParent":true,"mtime":1630046160319},{"name":"/home/user/Desktop/MAIN_PROJECT/node_modules/connect-mongo/node_modules/mongodb/src/mongo_types.ts","includedInParent":true,"mtime":1630046160515},{"name":"/home/user/Desktop/MAIN_PROJECT/package.json","includedInParent":true,"mtime":1630255567938},{"name":"/home/user/Desktop/MAIN_PROJECT/node_modules/connect-mongo/node_modules/mongodb/package.json","includedInParent":true,"mtime":1630046160255},{"name":"events","loc":{"line":4,"column":25},"parent":"/home/user/Desktop/MAIN_PROJECT/node_modules/connect-mongo/node_modules/mongodb/lib/mongo_types.js","resolved":"/home/user/Desktop/MAIN_PROJECT/node_modules/events/events.js"}],"generated":{"js":"\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CancellationToken = exports.TypedEventEmitter = exports.BSONType = void 0;\n\nvar events_1 = require(\"events\");\n/** @public */\n\n\nexports.BSONType = Object.freeze({\n  double: 1,\n  string: 2,\n  object: 3,\n  array: 4,\n  binData: 5,\n  undefined: 6,\n  objectId: 7,\n  bool: 8,\n  date: 9,\n  null: 10,\n  regex: 11,\n  dbPointer: 12,\n  javascript: 13,\n  symbol: 14,\n  javascriptWithScope: 15,\n  int: 16,\n  timestamp: 17,\n  long: 18,\n  decimal: 19,\n  minKey: -1,\n  maxKey: 127\n});\n/**\n * Typescript type safe event emitter\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nvar TypedEventEmitter = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(TypedEventEmitter, _events_1$EventEmitte);\n\n  var _super = _createSuper(TypedEventEmitter);\n\n  function TypedEventEmitter() {\n    _classCallCheck(this, TypedEventEmitter);\n\n    return _super.apply(this, arguments);\n  }\n\n  return TypedEventEmitter;\n}(events_1.EventEmitter);\n\nexports.TypedEventEmitter = TypedEventEmitter;\n/** @public */\n\nvar CancellationToken = /*#__PURE__*/function (_TypedEventEmitter) {\n  _inherits(CancellationToken, _TypedEventEmitter);\n\n  var _super2 = _createSuper(CancellationToken);\n\n  function CancellationToken() {\n    _classCallCheck(this, CancellationToken);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return CancellationToken;\n}(TypedEventEmitter);\n\nexports.CancellationToken = CancellationToken;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/mongo_types.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":26,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":26,"column":4}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":26,"column":12}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":26,"column":15}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":26,"column":22}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":26,"column":23}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":26,"column":31}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":26,"column":32}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":142,"column":0},"generated":{"line":27,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":13},"generated":{"line":30,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":13},"generated":{"line":30,"column":7}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":13},"generated":{"line":30,"column":8}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":13},"generated":{"line":30,"column":16}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":24},"generated":{"line":30,"column":19}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":30},"generated":{"line":30,"column":25}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":31},"generated":{"line":30,"column":26}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":24},"generated":{"line":30,"column":32}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":30,"column":33}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":144,"column":2},"generated":{"line":31,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":144,"column":2},"generated":{"line":31,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":144,"column":8},"generated":{"line":31,"column":8}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":144,"column":10},"generated":{"line":31,"column":10}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":31,"column":11}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":145,"column":2},"generated":{"line":32,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":145,"column":2},"generated":{"line":32,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":145,"column":8},"generated":{"line":32,"column":8}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":145,"column":10},"generated":{"line":32,"column":10}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":32,"column":11}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":146,"column":2},"generated":{"line":33,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":146,"column":2},"generated":{"line":33,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":146,"column":8},"generated":{"line":33,"column":8}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":146,"column":10},"generated":{"line":33,"column":10}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":33,"column":11}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":147,"column":2},"generated":{"line":34,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":147,"column":2},"generated":{"line":34,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":147,"column":7},"generated":{"line":34,"column":7}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":147,"column":9},"generated":{"line":34,"column":9}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":34,"column":10}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":148,"column":2},"generated":{"line":35,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":148,"column":2},"generated":{"line":35,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":148,"column":9},"generated":{"line":35,"column":9}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":148,"column":11},"generated":{"line":35,"column":11}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":35,"column":12}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":149,"column":2},"generated":{"line":36,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":149,"column":2},"generated":{"line":36,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":149,"column":11},"generated":{"line":36,"column":11}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":149,"column":13},"generated":{"line":36,"column":13}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":36,"column":14}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":150,"column":2},"generated":{"line":37,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":150,"column":2},"generated":{"line":37,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":150,"column":10},"generated":{"line":37,"column":10}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":150,"column":12},"generated":{"line":37,"column":12}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":37,"column":13}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":151,"column":2},"generated":{"line":38,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":151,"column":2},"generated":{"line":38,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":151,"column":6},"generated":{"line":38,"column":6}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":151,"column":8},"generated":{"line":38,"column":8}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":38,"column":9}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":152,"column":2},"generated":{"line":39,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":152,"column":2},"generated":{"line":39,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":152,"column":6},"generated":{"line":39,"column":6}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":152,"column":8},"generated":{"line":39,"column":8}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":39,"column":9}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":153,"column":2},"generated":{"line":40,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":153,"column":2},"generated":{"line":40,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":153,"column":6},"generated":{"line":40,"column":6}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":153,"column":8},"generated":{"line":40,"column":8}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":40,"column":10}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":154,"column":2},"generated":{"line":41,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":154,"column":2},"generated":{"line":41,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":154,"column":7},"generated":{"line":41,"column":7}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":154,"column":9},"generated":{"line":41,"column":9}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":41,"column":11}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":155,"column":2},"generated":{"line":42,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":155,"column":2},"generated":{"line":42,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":155,"column":11},"generated":{"line":42,"column":11}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":155,"column":13},"generated":{"line":42,"column":13}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":42,"column":15}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":156,"column":2},"generated":{"line":43,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":156,"column":2},"generated":{"line":43,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":156,"column":12},"generated":{"line":43,"column":12}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":156,"column":14},"generated":{"line":43,"column":14}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":43,"column":16}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":157,"column":2},"generated":{"line":44,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":157,"column":2},"generated":{"line":44,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":157,"column":8},"generated":{"line":44,"column":8}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":157,"column":10},"generated":{"line":44,"column":10}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":44,"column":12}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":158,"column":2},"generated":{"line":45,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":158,"column":2},"generated":{"line":45,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":158,"column":21},"generated":{"line":45,"column":21}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":158,"column":23},"generated":{"line":45,"column":23}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":45,"column":25}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":159,"column":2},"generated":{"line":46,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":159,"column":2},"generated":{"line":46,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":159,"column":5},"generated":{"line":46,"column":5}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":159,"column":7},"generated":{"line":46,"column":7}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":46,"column":9}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":160,"column":2},"generated":{"line":47,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":160,"column":2},"generated":{"line":47,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":160,"column":11},"generated":{"line":47,"column":11}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":160,"column":13},"generated":{"line":47,"column":13}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":47,"column":15}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":161,"column":2},"generated":{"line":48,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":161,"column":2},"generated":{"line":48,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":161,"column":6},"generated":{"line":48,"column":6}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":161,"column":8},"generated":{"line":48,"column":8}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":48,"column":10}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":162,"column":2},"generated":{"line":49,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":162,"column":2},"generated":{"line":49,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":162,"column":9},"generated":{"line":49,"column":9}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":162,"column":11},"generated":{"line":49,"column":11}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":49,"column":13}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":163,"column":2},"generated":{"line":50,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":163,"column":2},"generated":{"line":50,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":163,"column":8},"generated":{"line":50,"column":8}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":163,"column":10},"generated":{"line":50,"column":10}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":163,"column":11},"generated":{"line":50,"column":11}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":50,"column":12}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":164,"column":2},"generated":{"line":51,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":164,"column":2},"generated":{"line":51,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":164,"column":8},"generated":{"line":51,"column":8}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":164,"column":10},"generated":{"line":51,"column":10}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":38},"generated":{"line":52,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":24},"generated":{"line":52,"column":1}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":143,"column":13},"generated":{"line":52,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":420,"column":0},"generated":{"line":53,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":424,"column":0},"generated":{"line":57,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":425,"column":13},"generated":{"line":59,"column":4}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":425,"column":73},"generated":{"line":71,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":425,"column":73},"generated":{"line":71,"column":10}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":425,"column":73},"generated":{"line":71,"column":11}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":425,"column":0},"generated":{"line":73,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":425,"column":0},"generated":{"line":73,"column":7}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":425,"column":0},"generated":{"line":73,"column":8}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":425,"column":0},"generated":{"line":73,"column":25}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":425,"column":0},"generated":{"line":73,"column":28}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":425,"column":0},"generated":{"line":73,"column":45}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":427,"column":0},"generated":{"line":74,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":428,"column":13},"generated":{"line":76,"column":4}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":428,"column":39},"generated":{"line":88,"column":2}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":428,"column":0},"generated":{"line":90,"column":0}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":428,"column":0},"generated":{"line":90,"column":7}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":428,"column":0},"generated":{"line":90,"column":8}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":428,"column":0},"generated":{"line":90,"column":25}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":428,"column":0},"generated":{"line":90,"column":28}},{"source":"../src/mongo_types.ts","name":null,"original":{"line":428,"column":0},"generated":{"line":90,"column":45}}],"sources":{"../src/mongo_types.ts":"import type {\n  Binary,\n  Document,\n  ObjectId,\n  BSONRegExp,\n  Timestamp,\n  Decimal128,\n  Double,\n  Int32,\n  Long\n} from './bson';\nimport { EventEmitter } from 'events';\nimport type { Sort } from './sort';\n\n/** @internal */\nexport type TODO_NODE_3286 = any;\n\n/** Given an object shaped type, return the type of the _id field or default to ObjectId @public */\nexport type InferIdType<TSchema> = TSchema extends { _id: infer IdType } // user has defined a type for _id\n  ? // eslint-disable-next-line @typescript-eslint/ban-types\n    {} extends IdType // TODO(NODE-3285): Improve type readability\n    ? // eslint-disable-next-line @typescript-eslint/ban-types\n      Exclude<IdType, {}>\n    : unknown extends IdType\n    ? ObjectId\n    : IdType\n  : ObjectId; // user has not defined _id on schema\n\n/** Add an _id field to an object shaped type @public */\nexport type WithId<TSchema> = EnhancedOmit<TSchema, '_id'> & { _id: InferIdType<TSchema> };\n\n/**\n * Add an optional _id field to an object shaped type\n * @public\n *\n * @privateRemarks\n * `ObjectId extends TSchema['_id']` is a confusing ordering at first glance. Rather than ask\n * `TSchema['_id'] extends ObjectId` which translated to \"Is the _id property ObjectId?\"\n * we instead ask \"Does ObjectId look like (have the same shape) as the _id?\"\n */\nexport type OptionalId<TSchema extends { _id?: any }> = ObjectId extends TSchema['_id'] // a Schema with ObjectId _id type or \"any\" or \"indexed type\" provided\n  ? EnhancedOmit<TSchema, '_id'> & { _id?: InferIdType<TSchema> } // a Schema provided but _id type is not ObjectId\n  : WithId<TSchema>; // TODO(NODE-3285): Improve type readability\n\n/** TypeScript Omit (Exclude to be specific) does not work for objects with an \"any\" indexed type, and breaks discriminated unions @public */\nexport type EnhancedOmit<TRecordOrUnion, KeyUnion> = string extends keyof TRecordOrUnion\n  ? TRecordOrUnion // TRecordOrUnion has indexed type e.g. { _id: string; [k: string]: any; } or it is \"any\"\n  : TRecordOrUnion extends any\n  ? Pick<TRecordOrUnion, Exclude<keyof TRecordOrUnion, KeyUnion>> // discriminated unions\n  : never;\n\n/** Remove the _id field from an object shaped type @public */\nexport type WithoutId<TSchema> = Omit<TSchema, '_id'>;\n\n/** A MongoDB filter can be some portion of the schema or a set of operators @public */\nexport type Filter<TSchema> = {\n  [P in keyof TSchema]?: Condition<TSchema[P]>;\n} &\n  RootFilterOperators<TSchema>;\n\n/** @public */\nexport type Condition<T> = AlternativeType<T> | FilterOperators<AlternativeType<T>>;\n\n/**\n * It is possible to search using alternative types in mongodb e.g.\n * string types can be searched using a regex in mongo\n * array types can be searched using their element type\n * @public\n */\nexport type AlternativeType<T> = T extends ReadonlyArray<infer U>\n  ? T | RegExpOrString<U>\n  : RegExpOrString<T>;\n\n/** @public */\nexport type RegExpOrString<T> = T extends string ? BSONRegExp | RegExp | T : T;\n\n/** @public */\nexport interface RootFilterOperators<TSchema> extends Document {\n  $and?: Filter<TSchema>[];\n  $nor?: Filter<TSchema>[];\n  $or?: Filter<TSchema>[];\n  $text?: {\n    $search: string;\n    $language?: string;\n    $caseSensitive?: boolean;\n    $diacriticSensitive?: boolean;\n  };\n  $where?: string | ((this: TSchema) => boolean);\n  $comment?: string | Document;\n}\n\n/** @public */\nexport interface FilterOperators<TValue> extends Document {\n  // Comparison\n  $eq?: TValue;\n  $gt?: TValue;\n  $gte?: TValue;\n  $in?: ReadonlyArray<TValue>;\n  $lt?: TValue;\n  $lte?: TValue;\n  $ne?: TValue;\n  $nin?: ReadonlyArray<TValue>;\n  // Logical\n  $not?: TValue extends string ? FilterOperators<TValue> | RegExp : FilterOperators<TValue>;\n  // Element\n  /**\n   * When `true`, `$exists` matches the documents that contain the field,\n   * including documents where the field value is null.\n   */\n  $exists?: boolean;\n  $type?: BSONType | BSONTypeAlias;\n  // Evaluation\n  $expr?: Record<string, any>;\n  $jsonSchema?: Record<string, any>;\n  $mod?: TValue extends number ? [number, number] : never;\n  $regex?: TValue extends string ? RegExp | BSONRegExp | string : never;\n  $options?: TValue extends string ? string : never;\n  // Geospatial\n  $geoIntersects?: { $geometry: Document };\n  $geoWithin?: Document;\n  $near?: Document;\n  $nearSphere?: Document;\n  $maxDistance?: number;\n  // Array\n  $all?: ReadonlyArray<any>;\n  $elemMatch?: Document;\n  $size?: TValue extends ReadonlyArray<any> ? number : never;\n  // Bitwise\n  $bitsAllClear?: BitwiseFilter;\n  $bitsAllSet?: BitwiseFilter;\n  $bitsAnyClear?: BitwiseFilter;\n  $bitsAnySet?: BitwiseFilter;\n  $rand?: Record<string, never>;\n}\n\n/** @public */\nexport type BitwiseFilter =\n  | number /** numeric bit mask */\n  | Binary /** BinData bit mask */\n  | ReadonlyArray<number>; /** `[ <position1>, <position2>, ... ]` */\n\n/** @public */\nexport const BSONType = Object.freeze({\n  double: 1,\n  string: 2,\n  object: 3,\n  array: 4,\n  binData: 5,\n  undefined: 6,\n  objectId: 7,\n  bool: 8,\n  date: 9,\n  null: 10,\n  regex: 11,\n  dbPointer: 12,\n  javascript: 13,\n  symbol: 14,\n  javascriptWithScope: 15,\n  int: 16,\n  timestamp: 17,\n  long: 18,\n  decimal: 19,\n  minKey: -1,\n  maxKey: 127\n} as const);\n\n/** @public */\nexport type BSONType = typeof BSONType[keyof typeof BSONType];\n/** @public */\nexport type BSONTypeAlias = keyof typeof BSONType;\n\n/** @public */\nexport interface ProjectionOperators extends Document {\n  $elemMatch?: Document;\n  $slice?: number | [number, number];\n  $meta?: string;\n  /** @deprecated Since MongoDB 3.2, Use FindCursor#max */\n  $max?: any;\n}\n\n/** @public */\nexport type Projection<TSchema> = {\n  [Key in keyof TSchema]?: ProjectionOperators | 0 | 1 | boolean;\n} &\n  Partial<Record<string, ProjectionOperators | 0 | 1 | boolean>>;\n\n/** @public */\nexport type IsAny<Type, ResultIfAny, ResultIfNotAny> = true extends false & Type\n  ? ResultIfAny\n  : ResultIfNotAny;\n\n/** @public */\nexport type Flatten<Type> = Type extends ReadonlyArray<infer Item> ? Item : Type;\n\n/** @public */\nexport type SchemaMember<T, V> = { [P in keyof T]?: V } | { [key: string]: V };\n\n/** @public */\nexport type IntegerType = number | Int32 | Long;\n\n/** @public */\nexport type NumericType = IntegerType | Decimal128 | Double;\n\n/** @public */\nexport type FilterOperations<T> = T extends Record<string, any>\n  ? { [key in keyof T]?: FilterOperators<T[key]> }\n  : FilterOperators<T>;\n\n/** @public */\nexport type KeysOfAType<TSchema, Type> = {\n  [key in keyof TSchema]: NonNullable<TSchema[key]> extends Type ? key : never;\n}[keyof TSchema];\n\n/** @public */\nexport type KeysOfOtherType<TSchema, Type> = {\n  [key in keyof TSchema]: NonNullable<TSchema[key]> extends Type ? never : key;\n}[keyof TSchema];\n\n/** @public */\nexport type AcceptedFields<TSchema, FieldType, AssignableType> = {\n  readonly [key in KeysOfAType<TSchema, FieldType>]?: AssignableType;\n};\n\n/** It avoids using fields with not acceptable types @public */\nexport type NotAcceptedFields<TSchema, FieldType> = {\n  readonly [key in KeysOfOtherType<TSchema, FieldType>]?: never;\n};\n\n/** @public */\nexport type OnlyFieldsOfType<TSchema, FieldType = any, AssignableType = FieldType> = IsAny<\n  TSchema[keyof TSchema],\n  Record<string, FieldType>,\n  AcceptedFields<TSchema, FieldType, AssignableType> &\n    NotAcceptedFields<TSchema, FieldType> &\n    Record<string, AssignableType>\n>;\n\n/** @public */\nexport type MatchKeysAndValues<TSchema> = Readonly<Partial<TSchema>> & Record<string, any>;\n\n/** @public */\nexport type AddToSetOperators<Type> = {\n  $each?: Array<Flatten<Type>>;\n};\n\n/** @public */\nexport type ArrayOperator<Type> = {\n  $each?: Array<Flatten<Type>>;\n  $slice?: number;\n  $position?: number;\n  $sort?: Sort;\n};\n\n/** @public */\nexport type SetFields<TSchema> = ({\n  readonly [key in KeysOfAType<TSchema, ReadonlyArray<any> | undefined>]?:\n    | OptionalId<Flatten<TSchema[key]>>\n    | AddToSetOperators<Array<OptionalId<Flatten<TSchema[key]>>>>;\n} &\n  NotAcceptedFields<TSchema, ReadonlyArray<any> | undefined>) & {\n  readonly [key: string]: AddToSetOperators<any> | any;\n};\n\n/** @public */\nexport type PushOperator<TSchema> = ({\n  readonly [key in KeysOfAType<TSchema, ReadonlyArray<any>>]?:\n    | Flatten<TSchema[key]>\n    | ArrayOperator<Array<Flatten<TSchema[key]>>>;\n} &\n  NotAcceptedFields<TSchema, ReadonlyArray<any>>) & {\n  readonly [key: string]: ArrayOperator<any> | any;\n};\n\n/** @public */\nexport type PullOperator<TSchema> = ({\n  readonly [key in KeysOfAType<TSchema, ReadonlyArray<any>>]?:\n    | Partial<Flatten<TSchema[key]>>\n    | FilterOperations<Flatten<TSchema[key]>>;\n} &\n  NotAcceptedFields<TSchema, ReadonlyArray<any>>) & {\n  readonly [key: string]: FilterOperators<any> | any;\n};\n\n/** @public */\nexport type PullAllOperator<TSchema> = ({\n  readonly [key in KeysOfAType<TSchema, ReadonlyArray<any>>]?: TSchema[key];\n} &\n  NotAcceptedFields<TSchema, ReadonlyArray<any>>) & {\n  readonly [key: string]: ReadonlyArray<any>;\n};\n\n/** @public */\nexport type UpdateFilter<TSchema> = {\n  $currentDate?: OnlyFieldsOfType<\n    TSchema,\n    Date | Timestamp,\n    true | { $type: 'date' | 'timestamp' }\n  >;\n  $inc?: OnlyFieldsOfType<TSchema, NumericType | undefined>;\n  $min?: MatchKeysAndValues<TSchema>;\n  $max?: MatchKeysAndValues<TSchema>;\n  $mul?: OnlyFieldsOfType<TSchema, NumericType | undefined>;\n  $rename?: Record<string, string>;\n  $set?: MatchKeysAndValues<TSchema>;\n  $setOnInsert?: MatchKeysAndValues<TSchema>;\n  $unset?: OnlyFieldsOfType<TSchema, any, '' | true | 1>;\n  $addToSet?: SetFields<TSchema>;\n  $pop?: OnlyFieldsOfType<TSchema, ReadonlyArray<any>, 1 | -1>;\n  $pull?: PullOperator<TSchema>;\n  $push?: PushOperator<TSchema>;\n  $pullAll?: PullAllOperator<TSchema>;\n  $bit?: OnlyFieldsOfType<\n    TSchema,\n    NumericType | undefined,\n    { and: IntegerType } | { or: IntegerType } | { xor: IntegerType }\n  >;\n} & Document;\n\n/** @public */\nexport type Nullable<AnyType> = AnyType | null | undefined;\n\n/** @public */\nexport type OneOrMore<T> = T | ReadonlyArray<T>;\n\n/** @public */\nexport type GenericListener = (...args: any[]) => void;\n\n/**\n * Event description type\n * @public\n */\nexport type EventsDescription = Record<string, GenericListener>;\n\n/** @public */\nexport type CommonEvents = 'newListener' | 'removeListener';\n\n/**\n * Typescript type safe event emitter\n * @public\n */\nexport declare interface TypedEventEmitter<Events extends EventsDescription> extends EventEmitter {\n  addListener<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;\n  addListener(\n    event: CommonEvents,\n    listener: (eventName: string | symbol, listener: GenericListener) => void\n  ): this;\n  addListener(event: string | symbol, listener: GenericListener): this;\n\n  on<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;\n  on(\n    event: CommonEvents,\n    listener: (eventName: string | symbol, listener: GenericListener) => void\n  ): this;\n  on(event: string | symbol, listener: GenericListener): this;\n\n  once<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;\n  once(\n    event: CommonEvents,\n    listener: (eventName: string | symbol, listener: GenericListener) => void\n  ): this;\n  once(event: string | symbol, listener: GenericListener): this;\n\n  removeListener<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;\n  removeListener(\n    event: CommonEvents,\n    listener: (eventName: string | symbol, listener: GenericListener) => void\n  ): this;\n  removeListener(event: string | symbol, listener: GenericListener): this;\n\n  off<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;\n  off(\n    event: CommonEvents,\n    listener: (eventName: string | symbol, listener: GenericListener) => void\n  ): this;\n  off(event: string | symbol, listener: GenericListener): this;\n\n  removeAllListeners<EventKey extends keyof Events>(\n    event?: EventKey | CommonEvents | symbol | string\n  ): this;\n\n  listeners<EventKey extends keyof Events>(\n    event: EventKey | CommonEvents | symbol | string\n  ): Events[EventKey][];\n\n  rawListeners<EventKey extends keyof Events>(\n    event: EventKey | CommonEvents | symbol | string\n  ): Events[EventKey][];\n\n  emit<EventKey extends keyof Events>(\n    event: EventKey | symbol,\n    ...args: Parameters<Events[EventKey]>\n  ): boolean;\n\n  listenerCount<EventKey extends keyof Events>(\n    type: EventKey | CommonEvents | symbol | string\n  ): number;\n\n  prependListener<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;\n  prependListener(\n    event: CommonEvents,\n    listener: (eventName: string | symbol, listener: GenericListener) => void\n  ): this;\n  prependListener(event: string | symbol, listener: GenericListener): this;\n\n  prependOnceListener<EventKey extends keyof Events>(\n    event: EventKey,\n    listener: Events[EventKey]\n  ): this;\n  prependOnceListener(\n    event: CommonEvents,\n    listener: (eventName: string | symbol, listener: GenericListener) => void\n  ): this;\n  prependOnceListener(event: string | symbol, listener: GenericListener): this;\n\n  eventNames(): string[];\n  getMaxListeners(): number;\n  setMaxListeners(n: number): this;\n}\n\n/**\n * Typescript type safe event emitter\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport class TypedEventEmitter<Events extends EventsDescription> extends EventEmitter {}\n\n/** @public */\nexport class CancellationToken extends TypedEventEmitter<{ cancel(): void }> {}\n"},"lineCount":null}},"error":null,"hash":"05e072d84ce0cfd244ad0ac619c58d16","cacheData":{"env":{}}}